#include <iostream>
#include <conio.h> // used to read a character from the keyboard without echoing it to the screen
#include <windows.h>  // Include for Sleep function 
using namespace std;
bool gameOver;
const int width = 20;
const int height = 20;
int x, y, fruit_x, fruit_y,level, score;
int tail_x[100], tail_y[100];
int nTail;
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir;
void before_start()
{
	cout << "1 => easy , 2 => meduim , 3 => hard ";
	cout << endl << "inter a level : ";
	cin >> level;
	while (level != 1 && level != 2 && level != 3) {
		cout << "please inter a number 1 , 2 or 3: ";
		cin >> level;
	}
}
void Setup()
{
	gameOver = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	fruit_x = rand() % width;
	fruit_y = rand() % height;
	score = 0;
}
void Draw() {
	system("cls"); //system("clear");
	for (int i = 0; i < width + 2; i++)
		cout << "#";
	cout << endl;

	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0)
				cout << "#";
			if (i == y && j == x)
				cout << "O";
			else if (i == fruit_y && j == fruit_x)
				cout << "F";
			else
			{
				bool print = false;
				for (int k = 0; k < nTail; k++)
				{
					if (tail_x[k] == j && tail_y[k] == i)
					{
						cout << "o";
						print = true;
					}
				}
				if (!print)
					cout << " ";
			}


			if (j == width - 1)
				cout << "#";
		}
		cout << endl;
	}
	for (int i = 0; i < width + 2; i++)
		cout << "#";
	cout << endl;
	cout << "Score:" << score << endl;
}
void Input()
{
	if (_kbhit()) {
		switch (_getch())
		{
		case'a':
			dir = LEFT;
			break;
		case'd':
			dir = RIGHT;
			break;
		case'w':
			dir = UP;
			break;
		case's':
			dir = DOWN;
			break;
		case'x':
			gameOver = true;
			break;
		}
	}
}
void Logic()
{
	int prev_x = tail_x[0];
	int prev_y = tail_y[0];
	int prev2x, prev2y;
	tail_x[0] = x;
	tail_y[0] = y;
	for (int i = 1; i < nTail; i++) {
		prev2x = tail_x[i];
		prev2y = tail_y[i];
		tail_x[i] = prev_x;
		tail_y[i] = prev_y;
		prev_x = prev2x;
		prev_y = prev2y;
	}
	switch (dir)
	{
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	default:
		break;
	}
	if (level == 3) {
		if (x > width || x < 0 || y > height || y < 0) {
			gameOver = true;
		}
	}
	else {
		if (x >= width) x = 0; else if (x < 0) x = width - 1;
		if (y >= height) y = 0; else if (y < 0) y = height - 1;
	}
	if (x == fruit_x && y == fruit_y) {
		nTail++;
		score++;
		fruit_x = (rand() % width);
		fruit_y = (rand() % height);
		if (fruit_x == 0) {
			fruit_x++;
		}
		else if (fruit_x == width) {
			fruit_x--;
		}
		if (fruit_y == 0) {
			fruit_y++;
		}
		else if (fruit_x == height) {
			fruit_y--;
		}
	}
	for (int i = 0; i < nTail; i++){
		if (tail_x[i] == x && tail_y[i] == y) {
			gameOver = true;
		}
	}

	if (x == fruit_x && y == fruit_y)
	{
		score += 10;
		fruit_x = rand() % width;
		fruit_y = rand() % height;
		nTail++;
	}

}
int main()
{
	before_start();
	Setup();
	while (!gameOver) {
		Draw();
		Input();
		Logic();
		if (level == 1) {
			Sleep(100); // Delay the game loop by 100 milliseconds
		}
		else if (level == 2) {
			Sleep(75); // Delay the game loop by 75 milliseconds
		}
		else {
			Sleep(50); // Delay the game loop by 50 milliseconds
		}		
	}	
}

